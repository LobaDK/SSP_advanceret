@page "/todo"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using SSP_app.Codes
@using SSP_app.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using TodoApp.Data

@inject ToDoHandler _toDoHandler
@inject HashingHandler _hashingHandler
@inject SymmetricEncryptionHandler _encryptionHandler
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(policy: "RequiresAuthenticated")]

@if (!IsCprNumberRegistered)
{
    <p>You need to provide your CPR Number first. You will be redirected shortly.</p>
    <p>If you are not redirected, click <a href="/cprnr">here</a> to go to the page.</p>
}
else
{
    @if (!IsValidated)
    {
        <p>Please confirm your identity by entering your CPR Number:</p>
        <EditForm Model="Input" OnValidSubmit="ValidateCprNumberAsync">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.CprNumber" class="form-control" placeholder="Enter your CPR Number" />
                <label for="cprNumber" class="form-label">CPR Number</label>
                <ValidationMessage For="() => Input.CprNumber" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
        @if (!string.IsNullOrEmpty(ValidationError))
        {
            <p class="text-danger">@ValidationError</p>
        }
    }
    else
    {
        <p>Welcome to your ToDo page!</p>
        <div>
            <h4>Your To-Do List</h4>
            <ul>
                @foreach (var item in ToDoList)
                {
                    <li>
                        @item.Item
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveToDoItem(item.Id)">Remove</button>
                    </li>
                }
            </ul>
            <EditForm Model="NewToDoItem" OnValidSubmit="AddToDoItemAsync">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="NewToDoItem.Description" class="form-control" placeholder="Enter a new to-do item" />
                    <label for="newToDoItem" class="form-label">New To-Do Item</label>
                    <ValidationMessage For="() => NewToDoItem.Description" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Add Item</button>
            </EditForm>
        </div>
    }
}

@code {
    private bool IsCprNumberRegistered = false;
    private bool IsValidated = false;
    private ApplicationUser currentUser;
    private InputModel Input = new();
    private string? ValidationError;
    private List<TodoList> ToDoList = new();
    private ToDoItemModel NewToDoItem = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            currentUser = await UserManager.GetUserAsync(user);
        }

        if (!await _toDoHandler.HasEnteredCPRNumberAsync(currentUser))
        {
            IsCprNumberRegistered = false;

            // Redirect after a short delay
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/cprnr");
        }
        else
        {
            IsCprNumberRegistered = true;
        }
    }

    private async Task ValidateCprNumberAsync()
    {
        if (currentUser != null)
        {
            // Retrieve the hashed CPR number from the database
            var storedHashedCpr = await _toDoHandler.GetHashedCprNumberAsync(currentUser);

            // Validate the input CPR number against the stored hash
            if (_hashingHandler.BCryptVeryifyHash(Input.CprNumber, storedHashedCpr))
            {
                IsValidated = true;
                ValidationError = null;

                // Fetch the user's to-do list
                ToDoList = await GetToDoListAsync();
            }
            else
            {
                ValidationError = "The CPR Number you entered is incorrect. Please try again.";
            }
        }
    }

    private async Task<List<TodoList>> GetToDoListAsync()
    {
        if (currentUser != null)
        {
            List<TodoList> encryptedTodo = await _toDoHandler.GetToDoListAsync(currentUser);
            return encryptedTodo.Select(item => new TodoList
            {
                Id = item.Id,
                Item = _encryptionHandler.Decrypt(item.Item)
            }).ToList();
        }
        return new List<TodoList>();
    }

    private async Task AddToDoItemAsync()
    {
        if (!string.IsNullOrWhiteSpace(NewToDoItem.Description))
        {
            string encryptedDescription = _encryptionHandler.Encrypt(NewToDoItem.Description);
            await _toDoHandler.AddToDoItemAsync(currentUser, encryptedDescription);

            // Refresh the to-do list
            ToDoList = await GetToDoListAsync();

            NewToDoItem.Description = string.Empty; // Clear the input field
        }
    }

    private async Task RemoveToDoItem(int todoId)
    {
        await _toDoHandler.RemoveToDoItemAsync(currentUser, todoId);

        // Refresh the to-do list
        ToDoList = await GetToDoListAsync();
    }

    private class InputModel
    {
        [Required(ErrorMessage = "CPR Number is required.")]
        [StringLength(10, ErrorMessage = "CPR Number must be exactly 10 digits.", MinimumLength = 10)]
        [RegularExpression("^[0-9]*$", ErrorMessage = "CPR Number must contain only digits.")]
        public string CprNumber { get; set; } = string.Empty;
    }

    private class ToDoItemModel
    {
        [Required(ErrorMessage = "To-Do item description is required.")]
        public string Description { get; set; } = string.Empty;
    }
}
